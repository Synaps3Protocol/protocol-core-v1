{"abi":[{"type":"function","name":"approve","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"balance","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"disburse","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"token","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"disburse","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getApproved","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"operator","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getCustodial","inputs":[{"name":"contentId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getFees","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getLedgerEntry","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getSecuredContent","inputs":[{"name":"contentId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"getTreasuryAddress","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"grantAccess","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"contentId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"grantCustodial","inputs":[{"name":"contentId","type":"uint256","internalType":"uint256"},{"name":"distributor","type":"address","internalType":"address"},{"name":"encryptedData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"grantRights","inputs":[{"name":"grantee","type":"address","internalType":"address"},{"name":"contentId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"isAccessGranted","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"contentId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"isApprovedForAll","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isEligibleForDistribution","inputs":[{"name":"contentId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"mint","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"ownerOf","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"owner","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"revokeRights","inputs":[{"name":"grantee","type":"address","internalType":"address"},{"name":"contentId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"safeTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"safeTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setApprovalForAll","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"approved","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setFees","inputs":[{"name":"newTreasuryFee","type":"uint256","internalType":"uint256"},{"name":"token","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setFees","inputs":[{"name":"newTreasuryFee","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setTreasuryAddress","inputs":[{"name":"newTreasuryAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"tokenURI","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"withdraw","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"token","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"address","indexed":true,"internalType":"address"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ApprovalForAll","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"tokenId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","disburse(uint256)":"bd77ac2c","disburse(uint256,address)":"1c61f62b","getApproved(uint256)":"081812fc","getCustodial(uint256)":"8e5ae4b9","getFees(address)":"9af608c9","getLedgerEntry(address,address)":"8f132f87","getSecuredContent(uint256)":"11e09d32","getTreasuryAddress()":"e0024604","grantAccess(address,uint256)":"9df89256","grantCustodial(uint256,address,bytes)":"ed40f722","grantRights(address,uint256)":"869eaf1a","isAccessGranted(address,uint256)":"d455dda9","isApprovedForAll(address,address)":"e985e9c5","isEligibleForDistribution(uint256)":"34534e2e","mint(address,uint256)":"40c10f19","name()":"06fdde03","ownerOf(uint256)":"6352211e","revokeRights(address,uint256)":"9fcfd407","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setFees(uint256)":"3d18678e","setFees(uint256,address)":"3d162cdc","setTreasuryAddress(address)":"6605bfda","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","withdraw(address,uint256,address)":"69328dec"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"disburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"disburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"getCustodial\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLedgerEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"getSecuredContent\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"grantAccess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"name\":\"grantCustodial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"grantRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"isAccessGranted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"isEligibleForDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"revokeRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"disburse(uint256)\":{\"details\":\"This function can only be called by governance or an authorized entity.\",\"params\":{\"amount\":\"The amount of tokens to disburse.\"}},\"disburse(uint256,address)\":{\"details\":\"This function can only be called by governance or an authorized entity.\",\"params\":{\"amount\":\"The amount of tokens to disburse.\",\"token\":\"The address of the ERC20 token to disburse tokens.\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getCustodial(uint256)\":{\"params\":{\"contentId\":\"The ID of the content.\"},\"returns\":{\"_0\":\"The address of the active custodial.\"}},\"getFees(address)\":{\"params\":{\"token\":\"The address of the token.\"},\"returns\":{\"_0\":\"The treasury fee.\"}},\"getLedgerEntry(address,address)\":{\"params\":{\"account\":\"The address of the account.\",\"token\":\"The token to retrieve ledger amount.\"},\"returns\":{\"_0\":\"The amount of registered tokens for the account and specified token.\"}},\"getSecuredContent(uint256)\":{\"details\":\"Returns the encrypted content stored in the vault.\",\"params\":{\"contentId\":\"The ID of the content to retrieve.\"},\"returns\":{\"_0\":\"The encrypted content as a bytes array.\"}},\"getTreasuryAddress()\":{\"returns\":{\"_0\":\"The address of the treasury.\"}},\"grantAccess(address,uint256)\":{\"details\":\"Access can be granted only if the validator contract is valid and has been granted delegation rights.\",\"params\":{\"account\":\"The address of the account to be granted access.\",\"contentId\":\"The ID of the content for which access is being granted.\"}},\"grantCustodial(uint256,address,bytes)\":{\"details\":\"The distributor must be active.\",\"params\":{\"contentId\":\"The ID of the content to assign.\",\"distributor\":\"The address of the distributor to assign the content to.\",\"encryptedData\":\"Additional encrypted data to share access between authorized parties.\"}},\"grantRights(address,uint256)\":{\"params\":{\"contentId\":\"The content ID for which rights are being delegated.\",\"grantee\":\"The address of the account or contract to delegate rights to.\"}},\"isAccessGranted(address,uint256)\":{\"params\":{\"account\":\"The address of the user.\",\"contentId\":\"The content ID to check access.\"},\"returns\":{\"_0\":\"True if access is allowed, false otherwise.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"isEligibleForDistribution(uint256)\":{\"params\":{\"contentId\":\"The ID of the content.\"},\"returns\":{\"_0\":\"True if the content can be distributed, false otherwise.\"}},\"mint(address,uint256)\":{\"details\":\"Our naive assumption is that only those who know the CID hash can mint the corresponding token.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"revokeRights(address,uint256)\":{\"params\":{\"contentId\":\"The content ID for which rights are being revoked.\",\"grantee\":\"The address of the account or contract to revoke rights to.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"setFees(uint256)\":{\"params\":{\"newTreasuryFee\":\"The new treasury fee.\"}},\"setFees(uint256,address)\":{\"params\":{\"newTreasuryFee\":\"The new treasury fee %.\",\"token\":\"The token to set the fees.\"}},\"setTreasuryAddress(address)\":{\"params\":{\"newTreasuryAddress\":\"The new address of the treasury.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"withdraw(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of tokens to withdraw.\",\"recipient\":\"The address that will receive the withdrawn tokens.\",\"token\":\"The address of the ERC20 token to withdraw, or address(0) to withdraw native tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"disburse(uint256)\":{\"notice\":\"Disburses tokens from the contract to a specified address.\"},\"disburse(uint256,address)\":{\"notice\":\"Disburses tokens from the contract to a specified address.\"},\"getCustodial(uint256)\":{\"notice\":\"Retrieves the custodial address for the given content ID and ensures it is active.\"},\"getFees(address)\":{\"notice\":\"Returns the current treasury fee %. \"},\"getLedgerEntry(address,address)\":{\"notice\":\"Retrieves the registered token amount for the specified account.\"},\"getSecuredContent(uint256)\":{\"notice\":\"Retrieves the secured content for a given content ID.\"},\"getTreasuryAddress()\":{\"notice\":\"Gets the current address of the treasury.\"},\"grantAccess(address,uint256)\":{\"notice\":\"Grants access to a specific account for a certain content ID based on given conditions.\"},\"grantCustodial(uint256,address,bytes)\":{\"notice\":\"Assigns distribution rights over the content.\"},\"grantRights(address,uint256)\":{\"notice\":\"Delegates rights for a specific content ID to a grantee.\"},\"isAccessGranted(address,uint256)\":{\"notice\":\"Checks if access is allowed for a specific user and content.\"},\"isEligibleForDistribution(uint256)\":{\"notice\":\"Checks if the content is eligible for distribution.\"},\"mint(address,uint256)\":{\"notice\":\"Mints a new NFT to the specified address.\"},\"revokeRights(address,uint256)\":{\"notice\":\"Revokes the delegation of rights for a grantee.\"},\"setFees(uint256)\":{\"notice\":\"Sets a new treasury fee.Only the owner can call this function.\"},\"setFees(uint256,address)\":{\"notice\":\"Sets a new treasury fee.Only the owner can call this function.\"},\"setTreasuryAddress(address)\":{\"notice\":\"Sets the address of the treasury.\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdraws tokens from the contract to a specified recipient's address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IRightsManager.sol\":\"IRightsManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IContentVault.sol\":{\"keccak256\":\"0xb12ee1c203a4eb5722524e02a507b8eb02933d130ebb6f25712151e23e2b400d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a03888cbe8bc39d664247cc629a37b4c83d71786540c678d3b7dafa0fbb2441f\",\"dweb:/ipfs/QmQGXsLPQcHYCSFBTmE37TmAfNkCBMFBTc27sR2fHoXjAv\"]},\"contracts/interfaces/IDisburser.sol\":{\"keccak256\":\"0x381444eb73478d4875ddf2b171b8e924e4bf40f5244f48af565628246689d5fd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04425b3ca59303ee437a9efa3104feb160aafdec231457a2f2f47bdcfb816506\",\"dweb:/ipfs/Qmbupu5Vvgw6eFigDWFMwnCH9igAc3nEncizwqjQUszJqV\"]},\"contracts/interfaces/IFeesManager.sol\":{\"keccak256\":\"0xa26d580171ad72f2ce29ee7a34968d8fbeb17fa6c5d24fa94443b8a6e035eca5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e20e4c69259fd9d4ac6550acc8e1c1382c36497c6fc3e0489b0ff8ea5e1285e2\",\"dweb:/ipfs/QmdoihtdfsHVXKjYbhaM3YYEhgcnuiMVVtcTw9NK4FBNK2\"]},\"contracts/interfaces/IFundsManager.sol\":{\"keccak256\":\"0x37e871584c1a4d38f5f34d90501fb4c048601f3fe480660be920a48a1d21d2c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f60366f2274cb10c9e6298462ee199a638c94f523b7f8de730316772fb7d5f32\",\"dweb:/ipfs/QmX9jXtgUqL9nnyM7ZYdwRnm5XdtrxfWeGxskivrVpLcjY\"]},\"contracts/interfaces/ILedger.sol\":{\"keccak256\":\"0x9688eeb6cc59ac5885baff2bdceb4c8088289c2baaa273e3c706b45c816c6817\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cb1e69b79c79eb574e7fbe515d1a4d444b39ee77cff9a2f2677ac4d5528bb6a0\",\"dweb:/ipfs/QmYTXgrRJzRDepWDGzSf2v4i7RFKnw9BfUPoy5zG7sx3b5\"]},\"contracts/interfaces/IRightsAccessController.sol\":{\"keccak256\":\"0xbc6d17d1b292cd7f44be6b07d7ad91f08d3b8a43d5243a948d7469448108b343\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f2d22c883431025a6cbe0c655d863db33a0d6734c1935959b104cd8132f4c1fb\",\"dweb:/ipfs/Qmcatj1ceLBDXUm75A7ouEMkXZ5xr3juTStoi3pK7i1mii\"]},\"contracts/interfaces/IRightsCustodial.sol\":{\"keccak256\":\"0xd7aff532e072457e4a1450e8a01f2137c3b88b84f744e2655d1794bb67072f7f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://263c1921e293b9ffc867cde968aa455227355da488bfde37344b43b590ed2145\",\"dweb:/ipfs/QmNjNQh6VvcgcTH6w6UZhoz2jbLoaR28T2RQWWkRr6LesP\"]},\"contracts/interfaces/IRightsDelegable.sol\":{\"keccak256\":\"0xdf948dea85eacab1f20721e7faec220c065dca30cf6f14d1a2ba347e3af197aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6c65aec05357d30d15e4e4f095c9e5079eccb903168820852dff26308debb8a\",\"dweb:/ipfs/QmaaTV1v3KHX2Kh7x1UNzTVsnmHPPDPrBT7LcTe17pPZoa\"]},\"contracts/interfaces/IRightsManager.sol\":{\"keccak256\":\"0x4649d64dc3ea6b472e69b7f263d736fd1d37ae986ce48e68ae27ffe18547522f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://293d2172b93d734d2844ae673513d69e73226b955986758158fc0763bc72041a\",\"dweb:/ipfs/QmbKVa7ZhnHRHewy8bbQFs4XoSKBooA33xYEqN2qSFKwef\"]},\"contracts/interfaces/IRightsOwnership.sol\":{\"keccak256\":\"0xfec3e34c9b11ea331236942ebd022f3b8b718ddb32031a9f5b51aeb49ec588c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f65bde8e6b35bc321858e066377510eb3f39cad74c198f0ba84a173901710c8a\",\"dweb:/ipfs/QmTk7hTZio37RrpGoYmqQm3nYbALbRH31GxKCbHKEob7fv\"]},\"contracts/interfaces/ITreasurer.sol\":{\"keccak256\":\"0x1d3a27c88b133246bf5f1f517772fd8733565fc00c332f0c569f02ea0b516935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f1e301e1ea44eab151ab07740181907f76f8cbf534e65d64eca3cf4d50516939\",\"dweb:/ipfs/QmP877djQBu2w7wcWg7sSZfxVhLSKT9KDqDZeAgD1Wjibp\"]},\"contracts/libraries/Types.sol\":{\"keccak256\":\"0x1659676fc7444193e5ce854b7ebd964b48a7918763124b66f2e20b08bb4ff584\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fba5a4dc410d96a569775af9f264e30a727aab3c3d780d54560a6777f6b7dd1\",\"dweb:/ipfs/QmbSkEHkPJUmBnQWQrArA3iYHbHyaugeZ7EorLkhkVrahC\"]},\"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"approved","type":"address","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true}],"type":"event","name":"Approval","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"bool","name":"approved","type":"bool","indexed":false}],"type":"event","name":"ApprovalForAll","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"tokenId","type":"uint256","indexed":true}],"type":"event","name":"Transfer","anonymous":false},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"disburse"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"disburse"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"contentId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getCustodial","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getLedgerEntry","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"contentId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getSecuredContent","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getTreasuryAddress","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"contentId","type":"uint256"}],"stateMutability":"payable","type":"function","name":"grantAccess"},{"inputs":[{"internalType":"uint256","name":"contentId","type":"uint256"},{"internalType":"address","name":"distributor","type":"address"},{"internalType":"bytes","name":"encryptedData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"grantCustodial"},{"inputs":[{"internalType":"address","name":"grantee","type":"address"},{"internalType":"uint256","name":"contentId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"grantRights"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"contentId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"isAccessGranted","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"contentId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"isEligibleForDistribution","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"mint"},{"inputs":[],"stateMutability":"view","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}]},{"inputs":[{"internalType":"address","name":"grantee","type":"address"},{"internalType":"uint256","name":"contentId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"revokeRights"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"safeTransferFrom"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"safeTransferFrom"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setApprovalForAll"},{"inputs":[{"internalType":"uint256","name":"newTreasuryFee","type":"uint256"},{"internalType":"address","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setFees"},{"inputs":[{"internalType":"uint256","name":"newTreasuryFee","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setFees"},{"inputs":[{"internalType":"address","name":"newTreasuryAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setTreasuryAddress"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFrom"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"withdraw"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"disburse(uint256)":{"details":"This function can only be called by governance or an authorized entity.","params":{"amount":"The amount of tokens to disburse."}},"disburse(uint256,address)":{"details":"This function can only be called by governance or an authorized entity.","params":{"amount":"The amount of tokens to disburse.","token":"The address of the ERC20 token to disburse tokens."}},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"getCustodial(uint256)":{"params":{"contentId":"The ID of the content."},"returns":{"_0":"The address of the active custodial."}},"getFees(address)":{"params":{"token":"The address of the token."},"returns":{"_0":"The treasury fee."}},"getLedgerEntry(address,address)":{"params":{"account":"The address of the account.","token":"The token to retrieve ledger amount."},"returns":{"_0":"The amount of registered tokens for the account and specified token."}},"getSecuredContent(uint256)":{"details":"Returns the encrypted content stored in the vault.","params":{"contentId":"The ID of the content to retrieve."},"returns":{"_0":"The encrypted content as a bytes array."}},"getTreasuryAddress()":{"returns":{"_0":"The address of the treasury."}},"grantAccess(address,uint256)":{"details":"Access can be granted only if the validator contract is valid and has been granted delegation rights.","params":{"account":"The address of the account to be granted access.","contentId":"The ID of the content for which access is being granted."}},"grantCustodial(uint256,address,bytes)":{"details":"The distributor must be active.","params":{"contentId":"The ID of the content to assign.","distributor":"The address of the distributor to assign the content to.","encryptedData":"Additional encrypted data to share access between authorized parties."}},"grantRights(address,uint256)":{"params":{"contentId":"The content ID for which rights are being delegated.","grantee":"The address of the account or contract to delegate rights to."}},"isAccessGranted(address,uint256)":{"params":{"account":"The address of the user.","contentId":"The content ID to check access."},"returns":{"_0":"True if access is allowed, false otherwise."}},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"isEligibleForDistribution(uint256)":{"params":{"contentId":"The ID of the content."},"returns":{"_0":"True if the content can be distributed, false otherwise."}},"mint(address,uint256)":{"details":"Our naive assumption is that only those who know the CID hash can mint the corresponding token."},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"revokeRights(address,uint256)":{"params":{"contentId":"The content ID for which rights are being revoked.","grantee":"The address of the account or contract to revoke rights to."}},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"setFees(uint256)":{"params":{"newTreasuryFee":"The new treasury fee."}},"setFees(uint256,address)":{"params":{"newTreasuryFee":"The new treasury fee %.","token":"The token to set the fees."}},"setTreasuryAddress(address)":{"params":{"newTreasuryAddress":"The new address of the treasury."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."},"withdraw(address,uint256,address)":{"params":{"amount":"The amount of tokens to withdraw.","recipient":"The address that will receive the withdrawn tokens.","token":"The address of the ERC20 token to withdraw, or address(0) to withdraw native tokens."}}},"version":1},"userdoc":{"kind":"user","methods":{"disburse(uint256)":{"notice":"Disburses tokens from the contract to a specified address."},"disburse(uint256,address)":{"notice":"Disburses tokens from the contract to a specified address."},"getCustodial(uint256)":{"notice":"Retrieves the custodial address for the given content ID and ensures it is active."},"getFees(address)":{"notice":"Returns the current treasury fee %. "},"getLedgerEntry(address,address)":{"notice":"Retrieves the registered token amount for the specified account."},"getSecuredContent(uint256)":{"notice":"Retrieves the secured content for a given content ID."},"getTreasuryAddress()":{"notice":"Gets the current address of the treasury."},"grantAccess(address,uint256)":{"notice":"Grants access to a specific account for a certain content ID based on given conditions."},"grantCustodial(uint256,address,bytes)":{"notice":"Assigns distribution rights over the content."},"grantRights(address,uint256)":{"notice":"Delegates rights for a specific content ID to a grantee."},"isAccessGranted(address,uint256)":{"notice":"Checks if access is allowed for a specific user and content."},"isEligibleForDistribution(uint256)":{"notice":"Checks if the content is eligible for distribution."},"mint(address,uint256)":{"notice":"Mints a new NFT to the specified address."},"revokeRights(address,uint256)":{"notice":"Revokes the delegation of rights for a grantee."},"setFees(uint256)":{"notice":"Sets a new treasury fee.Only the owner can call this function."},"setFees(uint256,address)":{"notice":"Sets a new treasury fee.Only the owner can call this function."},"setTreasuryAddress(address)":{"notice":"Sets the address of the treasury."},"withdraw(address,uint256,address)":{"notice":"Withdraws tokens from the contract to a specified recipient's address."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":20000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IRightsManager.sol":"IRightsManager"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"contracts/interfaces/IContentVault.sol":{"keccak256":"0xb12ee1c203a4eb5722524e02a507b8eb02933d130ebb6f25712151e23e2b400d","urls":["bzz-raw://a03888cbe8bc39d664247cc629a37b4c83d71786540c678d3b7dafa0fbb2441f","dweb:/ipfs/QmQGXsLPQcHYCSFBTmE37TmAfNkCBMFBTc27sR2fHoXjAv"],"license":"MIT"},"contracts/interfaces/IDisburser.sol":{"keccak256":"0x381444eb73478d4875ddf2b171b8e924e4bf40f5244f48af565628246689d5fd","urls":["bzz-raw://04425b3ca59303ee437a9efa3104feb160aafdec231457a2f2f47bdcfb816506","dweb:/ipfs/Qmbupu5Vvgw6eFigDWFMwnCH9igAc3nEncizwqjQUszJqV"],"license":"MIT"},"contracts/interfaces/IFeesManager.sol":{"keccak256":"0xa26d580171ad72f2ce29ee7a34968d8fbeb17fa6c5d24fa94443b8a6e035eca5","urls":["bzz-raw://e20e4c69259fd9d4ac6550acc8e1c1382c36497c6fc3e0489b0ff8ea5e1285e2","dweb:/ipfs/QmdoihtdfsHVXKjYbhaM3YYEhgcnuiMVVtcTw9NK4FBNK2"],"license":"MIT"},"contracts/interfaces/IFundsManager.sol":{"keccak256":"0x37e871584c1a4d38f5f34d90501fb4c048601f3fe480660be920a48a1d21d2c8","urls":["bzz-raw://f60366f2274cb10c9e6298462ee199a638c94f523b7f8de730316772fb7d5f32","dweb:/ipfs/QmX9jXtgUqL9nnyM7ZYdwRnm5XdtrxfWeGxskivrVpLcjY"],"license":"MIT"},"contracts/interfaces/ILedger.sol":{"keccak256":"0x9688eeb6cc59ac5885baff2bdceb4c8088289c2baaa273e3c706b45c816c6817","urls":["bzz-raw://cb1e69b79c79eb574e7fbe515d1a4d444b39ee77cff9a2f2677ac4d5528bb6a0","dweb:/ipfs/QmYTXgrRJzRDepWDGzSf2v4i7RFKnw9BfUPoy5zG7sx3b5"],"license":"MIT"},"contracts/interfaces/IRightsAccessController.sol":{"keccak256":"0xbc6d17d1b292cd7f44be6b07d7ad91f08d3b8a43d5243a948d7469448108b343","urls":["bzz-raw://f2d22c883431025a6cbe0c655d863db33a0d6734c1935959b104cd8132f4c1fb","dweb:/ipfs/Qmcatj1ceLBDXUm75A7ouEMkXZ5xr3juTStoi3pK7i1mii"],"license":"MIT"},"contracts/interfaces/IRightsCustodial.sol":{"keccak256":"0xd7aff532e072457e4a1450e8a01f2137c3b88b84f744e2655d1794bb67072f7f","urls":["bzz-raw://263c1921e293b9ffc867cde968aa455227355da488bfde37344b43b590ed2145","dweb:/ipfs/QmNjNQh6VvcgcTH6w6UZhoz2jbLoaR28T2RQWWkRr6LesP"],"license":"MIT"},"contracts/interfaces/IRightsDelegable.sol":{"keccak256":"0xdf948dea85eacab1f20721e7faec220c065dca30cf6f14d1a2ba347e3af197aa","urls":["bzz-raw://a6c65aec05357d30d15e4e4f095c9e5079eccb903168820852dff26308debb8a","dweb:/ipfs/QmaaTV1v3KHX2Kh7x1UNzTVsnmHPPDPrBT7LcTe17pPZoa"],"license":"MIT"},"contracts/interfaces/IRightsManager.sol":{"keccak256":"0x4649d64dc3ea6b472e69b7f263d736fd1d37ae986ce48e68ae27ffe18547522f","urls":["bzz-raw://293d2172b93d734d2844ae673513d69e73226b955986758158fc0763bc72041a","dweb:/ipfs/QmbKVa7ZhnHRHewy8bbQFs4XoSKBooA33xYEqN2qSFKwef"],"license":"MIT"},"contracts/interfaces/IRightsOwnership.sol":{"keccak256":"0xfec3e34c9b11ea331236942ebd022f3b8b718ddb32031a9f5b51aeb49ec588c7","urls":["bzz-raw://f65bde8e6b35bc321858e066377510eb3f39cad74c198f0ba84a173901710c8a","dweb:/ipfs/QmTk7hTZio37RrpGoYmqQm3nYbALbRH31GxKCbHKEob7fv"],"license":"MIT"},"contracts/interfaces/ITreasurer.sol":{"keccak256":"0x1d3a27c88b133246bf5f1f517772fd8733565fc00c332f0c569f02ea0b516935","urls":["bzz-raw://f1e301e1ea44eab151ab07740181907f76f8cbf534e65d64eca3cf4d50516939","dweb:/ipfs/QmP877djQBu2w7wcWg7sSZfxVhLSKT9KDqDZeAgD1Wjibp"],"license":"MIT"},"contracts/libraries/Types.sol":{"keccak256":"0x1659676fc7444193e5ce854b7ebd964b48a7918763124b66f2e20b08bb4ff584","urls":["bzz-raw://8fba5a4dc410d96a569775af9f264e30a727aab3c3d780d54560a6777f6b7dd1","dweb:/ipfs/QmbSkEHkPJUmBnQWQrArA3iYHbHyaugeZ7EorLkhkVrahC"],"license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol":{"keccak256":"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4","urls":["bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7","dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"],"license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"keccak256":"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1","urls":["bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02","dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE"],"license":"MIT"},"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b","urls":["bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df","dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"],"license":"MIT"}},"version":1},"id":36}